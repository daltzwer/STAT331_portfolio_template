---
title: "STAT 331 Portfolio"
author: "Daltzwer Oliveros"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a C+ to a B-. So far in our quarter, I feel I have already improved so much on my coding skills and have felt quite proud of what I have been able to accomplish thus far. However, I also recognize that my current skill set and programming knowledge is not up to par to an A or even a solid B yet based on the grading guidelines we developed in class.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Lab 4

```{r wd-1-csv}
avocado <- read_csv(here("Week 4", "Labs", "avocado.csv"))

```

-   `xlsx` Practice Activity 4

```{r wd-1-xlsx}
library(readxl) 
library(tidyverse)

military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending"  , 
                      skip = 6, 
                      n_max = 186 )

```

-   `txt` Practice Activity 5.2

```{r wd-1-txt}
message <- read_csv(here::here( 
                                 "data", 
                                 "scrambled_message.txt")
                      )
```

**WD-2: I can select necessary columns from a dataset.** Lab 3 Question 11

```{r wd-2}
 subj_fam <- hiphop_clean |>
  filter( age < 20) |>
  group_by(word) |>
  summarise(mean_fam = mean(familiarity)) 

subj_fam|>
  slice_min(mean_fam)

subj_fam|>
  slice_max(mean_fam)

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric Lab 3 question 11

```{r wd-3-numeric}
 subj_fam <- hiphop_clean |>
  filter( age < 20) |>
  group_by(word) |>
  summarise(mean_fam = mean(familiarity)) 

subj_fam|>
  slice_min(mean_fam)

subj_fam|>
  slice_max(mean_fam)
```

-   character -- specifically a string Lab 3 Question 12

```{r wd-3-string}
nw_women_fam <- hiphop_clean |>
  filter( ethnic1 == "non-white", sex == "Female") |>
  group_by(word) |>
  summarise(mean_fam = mean(familiarity)) 

nw_women_fam|>
  slice_min(mean_fam)

nw_women_fam|>
  slice_max(mean_fam)

```

-   factor

```{r wd-3-factor}

```

-   date Practice Activity 5.1 Question 3

```{r wd-3-date}
suspects_ <- suspects |>
  filter(Time.Spotted %within% within_thanks)
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}

```

-   character -- specifically a string Lab 3 question 3

```{r wd-4-string}
hiphop_clean = hiphop_clean |>
  mutate(ethnic1 = if_else(ethnic == "white", "white", "non-white"))
```

-   factor - Lab 5 Question 2.3

```{r wd-4-factor}
 AverageWeight2 <- surveys |>
  mutate(genus = fct_reorder(genus , weight, mean) |>
           fct_rev()) |>
  group_by(genus, year) |>
  summarise(AverageWeight = mean(weight), .groups = "keep")

ggplot(data = AverageWeight2, 
       mapping = aes(x = year, y = AverageWeight, color = genus)) +
  geom_line() +
  labs(x = "Year of Observation", 
       y = "Average Weight (Grams)", 
       color = "Genus of Rodent")
```

-   date Practice Activity 5.1 Question 1

```{r wd-4-date}
suspects <- suspects |>
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted, tzone = "America/Los_Angeles")
         )
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}

```

-   `right_join()`

```{r wd-5-right}

```

-   `inner_join() - Lab 4 Question 7`

```{r wd-5-inner}
 California |>
  inner_join(avocado_metro, by = "region") |>
  pivot_longer(cols = (Smalls:ExtraLarges),
               names_to = "Avocado Size", 
               values_to = "Amntsld") |>
  group_by(region, type, `Avocado Size`) |>
  summarise(avgsld = mean(Amntsld)) |>
  mutate(`Avocado Size` = factor(`Avocado Size`, 
                                 levels = c("Smalls", "Larges", "ExtraLarges"))) |>
  ggplot( aes(fill = `Avocado Size`, y = avgsld, x = region)) + 
    geom_bar(position = "fill", stat = "identity") +
  facet_wrap( ~ type) +
 scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  labs(x = "Region of CA", y = "Proportion of Mean Avocados Sold") +
  scale_fill_manual(values = c("lightblue", "dodgerblue2", "darkolivegreen2")) 

```

-   `full_join()` Preview Activity 4.3 Question 2

```{r wd-5-full}

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()` Lab 4 Question 5. Unofficial revision

```{r wd-6-semi}

```

-   `anti_join()` Lab Question 2

```{r wd-6-anti}
avocado_metro <- avocado |>
  anti_join(avocado_major, by = "region")
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()` Lab 4

```{r wd-7-long}
California |>
  inner_join(avocado_metro, by = "region") |>
  pivot_longer(cols = (Smalls:ExtraLarges),
               names_to = "Avocado Size", 
               values_to = "Amntsld") |>
  group_by(region, type, `Avocado Size`) |>
  summarise(avgsld = mean(Amntsld)) |>
  mutate(`Avocado Size` = factor(`Avocado Size`, 
                                 levels = c("Smalls", "Larges", "ExtraLarges"))) |>
  ggplot( aes(fill = `Avocado Size`, y = avgsld, x = region)) + 
    geom_bar(position = "fill", stat = "identity") +
  facet_wrap( ~ type) +
 scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  labs(x = "Region of CA", y = "Proportion of Mean Avocados Sold") +
  scale_fill_manual(values = c("lightblue", "dodgerblue2", "darkolivegreen2")) 

```

-   `pivot_wider()` Lab 4 Question 6

```{r wd-7-wide}
 California <- avocado_metro |>
  filter(region %in% c("LosAngeles", "SanDiego", "Sacramento", "SanFrancisco")) |>
  group_by(region, type) |>
  summarise(AvocadoPrice = mean(AveragePrice), 
            .groups = "keep") |>
  pivot_wider(names_from = type,
              values_from = AvocadoPrice) |>
  mutate(PriceDifference = organic - conventional) |>
  arrange(desc(PriceDifference))
California
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example 1 Lab 2 Question 8

```{r r-2-1}
# Code for question 8 (and 9 and 10 and 11 and 12)! :) 
ggplot(data = surveys,
       mapping = aes(x = species, y = weight)) + 
   #changing color of all points
  geom_jitter(color = "lightblue", alpha = 0.2) +  
  #getting rid of outliers from boxplot graph 
  geom_boxplot(outlier.shape = NA) 
```

-   Example 2 Lab 5 Question 3.1

```{r r-2-2}
ggplot(data = Captured, 
       mapping = aes(x = day_of_week, 
                     y = n, 
                     fill = day_of_week)) +
  geom_col() +
  labs(x = "Day of the Week Captured", 
       y = "Total Amount of Rodents Captured", 
       fill = "Day of the Week")
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1 Lab 4 Question 5

```{r r-3-1}
top_five <- avocado_metro|>
  group_by(region) |>
  summarise(avg_sales = mean(`Total Volume`)) |>
  slice_max(avg_sales, n= 5) |>
  pull(region)
  

avocado_metro |>
  filter(region %in% top_five)|>
  ggplot(mapping = aes(x = region, y = `Total Volume`)) +
  geom_boxplot(fill = "lightblue", colour = "darkgreen") +
  labs(x = "Metro Regions", y = "Total Number of Avocados Sold")

```

-   Example 2 Lab 4 Question 3

```{r r-3-2}
avocado_major |>
  filter(type == "organic", year == "2017") |>
  select(Smalls, region) |>
  group_by(region) |>
  summarise(total_small_sold = sum(Smalls))

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables Lab 2 Question 6

```{r dvs-1-num}
ggplot(data = surveys, 
       mapping = aes(x = weight, 
                     y = hindfoot_length)) +
  geom_jitter(width = 2, height = 2) 
```

-   numeric variables and categorical variables Lab 5 Question 3.2

```{r dvs-2-num-cat}
day_levels <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
 cols <- c("Mon" = "red", "Tue" = "blue", "Wed" = "darkgreen", 
           "Thu" = "orange", "Fri" = "lightblue", "Sat" = "tomato", "Sun" = "darkblue")
 
ggplot(data = Captured, 
       mapping = aes(x = factor(day_of_week, day_levels), 
                     y = n,
                     fill = factor(day_of_week, day_levels)
                     )) +
  geom_col() +
  labs(x = "Day of the Week Captured", 
       y = "", 
       title = "Total Amount of Rodents Captured by Day of Week",
       fill = "Day of the Week") +
  scale_fill_manual(values = cols)
```

-   categorical variables

```{r dvs-2-cat}

```

-   dates

```{r dvs-2-date}

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1 Lab 5 Question 1

```{r dvs-2-1}
surveys <- surveys |>
  mutate(species = fct_reorder(species, weight))

ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
  geom_jitter(color = "lightblue", alpha = 0.2) +
  labs(x = "Weight (Grams)", y = "", 
       title = "Boxplots of Weight by Rodent Species") +
  geom_boxplot(outlier.shape = NA) 
```

-   Example 2 Lab 5 Question 3.2

```{r dvs-2-2}
day_levels <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
 cols <- c("Mon" = "red", "Tue" = "blue", "Wed" = "darkgreen", 
           "Thu" = "orange", "Fri" = "lightblue", "Sat" = "tomato", "Sun" = "darkblue")
 
ggplot(data = Captured, 
       mapping = aes(x = factor(day_of_week, day_levels), 
                     y = n,
                     fill = factor(day_of_week, day_levels)
                     )) +
  geom_col() +
  labs(x = "Day of the Week Captured", 
       y = "", 
       title = "Total Amount of Rodents Captured by Day of Week",
       fill = " ") +
  scale_fill_manual(values = cols)

#https://guslipkin.medium.com/reordering-bar-and-column-charts-with-ggplot2-in-r-435fad1c643e


```

**DVS-3: I show creativity in my visualizations**

-   Example 1 Lab 5 Question 3.2

```{r dvs-3-1}
day_levels <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
 cols <- c("Mon" = "red", "Tue" = "blue", "Wed" = "darkgreen", 
           "Thu" = "orange", "Fri" = "lightblue", "Sat" = "tomato", "Sun" = "darkblue")
 
ggplot(data = Captured, 
       mapping = aes(x = factor(day_of_week, day_levels), 
                     y = n,
                     fill = factor(day_of_week, day_levels)
                     )) +
  geom_col() +
  labs(x = "Day of the Week Captured", 
       y = "", 
       title = "Total Amount of Rodents Captured by Day of Week",
       fill = " ") +
  scale_fill_manual(values = cols)

#https://guslipkin.medium.com/reordering-bar-and-column-charts-with-ggplot2-in-r-435fad1c643e

```

-   Example 2 Lab 5 Question 1

```{r dvs-3-2}
surveys <- surveys |>
  mutate(species = fct_reorder(species, weight))

ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
  geom_jitter(color = "lightblue", alpha = 0.2) +
  labs(x = "Weight (Grams)", y = "", 
       title = "Boxplots of Weight by Rodent Species") +
  geom_boxplot(outlier.shape = NA) 
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1 Lab 3 Question 5

```{r dvs-4-1}
hiphop_clean <- hiphop |>
  mutate(across(c(jayz, jayz1, barkley, boondocks, boondocks1, monique, bieber), 
                as.factor))
str(hiphop_clean)
```

-   Example 2 Lab 5 Question 2.2

```{r dvs-4-2}
AverageWeight <- surveys |>
  group_by(genus, year) |>
  summarise(AverageWeight = mean(weight), .groups = "keep") 

ggplot(data = AverageWeight, 
       mapping = aes(x = year, 
                     y = AverageWeight, 
                     color = genus)) +
  geom_line() +
 labs(x = "Year of Observation", 
       y = "Average Weight (Grams)", 
       color = "Genus of Rodent")

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1 Challenge 3 Male vs Female

```{r dvs-5-1}
women_genre <- hiphop_clean |>
  filter( sex == "Female") |>
  select(intl, vocal, classical, folk, rock, country, pop, alternative, hiphop, unclassifiable) |>
  summarise_all(mean)
women_genre

```

-   Example 2 Challenge 3 Question 12

```{r dvs-5-2}
nw_women_fam <- hiphop_clean |>
  filter( ethnic1 == "non-white", sex == "Female") |>
  group_by(word) |>
  summarise(mean_fam = mean(familiarity)) 

nw_women_fam|>
  slice_min(mean_fam)

nw_women_fam|>
  slice_max(mean_fam)


```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}

```

-   Example 2

```{r dvs-6-2}

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}

```

-   Example 2

```{r dvs-7-2}

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}

```

-   `across()` Lab 3 Question 5

```{r pe-1-across}
hiphop_clean <- hiphop |>
  mutate(across(c(jayz, jayz1, barkley, boondocks, boondocks1, monique, bieber), 
                as.factor))
str(hiphop_clean)
```

-   `map()` functions

```{r pe-1-map-1}

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}

```

-   Example 2

```{r pe2-2}

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()` Lab 3 Question 5

```{r pe-3-across}
hiphop_clean <- hiphop |>
  mutate(across(c(jayz, jayz1, barkley, boondocks, boondocks1, monique, bieber), 
                as.factor))
str(hiphop_clean)
```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}

```

```{r pe-3-map-2}

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}

```

-   Example 2

```{r pe-4-2}

```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}

```

-   Example 2

```{r dsm-1-2}

```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}

```

-   Example 2

```{r dsm-2-2}

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

So far in our class, I have done most of the revisions that I have been allowed to do. I also believe that I have incorporated most of the feedback I have received into my future projects in hopes of applying the new skill I just learned. One opportunity I believe I have is that I am not consistent enough in applying some of the feedback I have received. This is often due to me rushing to make our deadline and forgetting to double check my work before submitting. With a little more repetition and finding a way to be more efficient, I believe I can further improve upon this opportunity before the quarter ends. As the quarter progressed, I believed I have showcased a better understanding of coding and what it takes to write tidy and efficient code.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

This is where I believe my greatest opportunity lies. Thus far, I rarely go above and beyond due to a fear of messing up my whole project entirely. With a very limited background in computer programming, I am under the misconception that I do not currently have the skill set to be able to go above and beyond in our labs and challenges. I do, however, often research possible solutions to my problems and cite it appropriately in my projects. I also regularly go to tutoring hours in hopes of improving on the efficiency of my code and my overall understanding of the concepts we are learning in class. Additionally, I try to incorporate what we learned from our previous labs into our current projects.

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

![](images/Stat%20331%20screenshot.png)

Similar to what I wrote in the "Extending My Thinking" section of our reflection, often times, I find myself hesitant to provide more useful feedback due to my fear of giving the wrong answer.
Despite my limited knowledge and skill set, however, I believe I have done well in this aspect of our class. I complete our weekly Peer Reviews on time while trying to be as detailed as I can about the things my peer should keep doing or improve upon. In our groups, I have acted on my role as best as I can without going into someone's role while being patient and respectful. I try to clarify any ambiguity my group members may have when I can and help debug their code for our lab assignments. I will, however, admit that I feel that I have not been carrying my own weight in our practice activities due to my limited skill set. I am unsure if this is an accurate depiction of our group situation but I would like to continue improving on this department so I can contribute a little more in our group projects and better support my group members.
